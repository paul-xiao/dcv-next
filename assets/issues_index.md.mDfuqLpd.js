import{_ as s,c as i,o as a,aP as n}from"./chunks/framework.1WYuimUT.js";const u=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"issues/index.md","filePath":"issues/index.md"}'),t={name:"issues/index.md"},e=n(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="如何本地测试组件库" tabindex="-1">如何本地测试组件库 <a class="header-anchor" href="#如何本地测试组件库" aria-label="Permalink to &quot;如何本地测试组件库&quot;">​</a></h2><p>npm、yarn、pnpm 均可使用创建软链接的方式添加本地库依赖，本次我们使用 yarn link</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建软链</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Links are registered in ~/.config/yarn/link</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib-path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看软链是否创建成功</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.config/yarn/link </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ll</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加依赖</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project-path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link lib-name</span></span></code></pre></div><h2 id="组件库如何加载-types-文件" tabindex="-1">组件库如何加载 types 文件 <a class="header-anchor" href="#组件库如何加载-types-文件" aria-label="Permalink to &quot;组件库如何加载 types 文件&quot;">​</a></h2><h3 id="tsconfig-json-配置" tabindex="-1">tsconfig.json 配置 <a class="header-anchor" href="#tsconfig-json-配置" aria-label="Permalink to &quot;tsconfig.json 配置&quot;">​</a></h3><p>@types，typeRoots 和 types 默认所有可见的&quot;@types&quot;包会在编译过程中被包含进来。 node_modules/@types 文件夹下以及它们子文件夹下的所有包都是可见的； 也就是说， ./node_modules/@types/，../node_modules/@types/和../../node_modules/@types/等等。</p><p>如果指定了 typeRoots，只有 typeRoots 下面的包才会被包含进来。 比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;typeRoots&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./typings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个配置文件会包含所有./typings 下面的包，而不包含./node_modules/@types 里面的包。</p><p>如果指定了 types，只有被列出来的包才会被包含进来。 比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个 tsconfig.json 文件将仅会包含 ./node_modules/@types/node，./node_modules/@types/lodash 和./node_modules/@types/express。/@types/。 node_modules/@types/*里面的其它包不会被引入进来。</p><p>指定&quot;types&quot;: []来禁用自动引入@types 包。</p><blockquote><p>注意，自动引入只在你使用了全局的声明（相反于模块）时是重要的。 如果你使用 import &quot;foo&quot;语句，TypeScript 仍然会查找 node_modules 和 node_modules/@types 文件夹来获取 foo 包。</p></blockquote><h2 id="cannot-find-module-xxx-or-its-corresponding-type-declarations-ts-2307" tabindex="-1">Cannot find module &#39;xxx&#39; or its corresponding type declarations.ts(2307) <a class="header-anchor" href="#cannot-find-module-xxx-or-its-corresponding-type-declarations-ts-2307" aria-label="Permalink to &quot;Cannot find module &#39;xxx&#39; or its corresponding type declarations.ts(2307)&quot;">​</a></h2><p>todo: 是否与 vscode 缓存有关，切换版本为何会解决，待验证</p><p>解决方案:</p><ol><li>切换 vscode ts 版本？</li><li>include 指定 type 文件路径</li></ol><h2 id="清除-vscode-缓存" tabindex="-1">清除 vscode 缓存 <a class="header-anchor" href="#清除-vscode-缓存" aria-label="Permalink to &quot;清除 vscode 缓存&quot;">​</a></h2><p>ctrl+shift+p</p><p>Workspace: Cache Clean</p><h2 id="组件库打包成-js-文件-如何加载-types" tabindex="-1">组件库打包成 js 文件，如何加载 types? <a class="header-anchor" href="#组件库打包成-js-文件-如何加载-types" aria-label="Permalink to &quot;组件库打包成 js 文件，如何加载 types?&quot;">​</a></h2><p>package.json 设置 types 字段</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/types/index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h2 id="vite-types-打包原理" tabindex="-1">vite types 打包原理 <a class="header-anchor" href="#vite-types-打包原理" aria-label="Permalink to &quot;vite types 打包原理&quot;">​</a></h2><ul><li>什么是 esm</li></ul><h2 id="tailwindcss-如何打包" tabindex="-1">tailwindcss 如何打包 <a class="header-anchor" href="#tailwindcss-如何打包" aria-label="Permalink to &quot;tailwindcss 如何打包&quot;">​</a></h2><p>利用 tailwindcss 命令行工具生成 css</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;tailwind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tailwindcss -o src/styles/tailwind.css --minify&quot;</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tailwind</span></span></code></pre></div>`,31),p=[e];function l(h,o,d,k,r,c){return a(),i("div",null,p)}const g=s(t,[["render",l]]);export{u as __pageData,g as default};
